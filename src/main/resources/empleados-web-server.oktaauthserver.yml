# Spring properties
spring:
  application:
    name: empleados-web-service  # Identify this application
# ViewResolver
  mvc:
     view:
       prefix: /jsp/
       suffix: .jsp

  security:
    oauth2:
      client:
        registration:
          custom-client:
            client-id: R2dpxQ3vPrtfgF72
            client-secret: fDw7Mpkk5czHNuSRtmhGmAGL42CaxQB9
            client-name: Auth Server
            scope: user_info
            provider: custom-provider
            redirect-uri: http://localhost:3333/login/oauth2/code/
#            redirect-uri: http://example.com
            client-authentication-method: basic
            authorization-grant-type: authorization_code
        provider:
          custom-provider:
            token-uri: http://localhost:8081/auth/oauth/token
            authorization-uri: http://localhost:8081/auth/oauth/authorize
            user-info-uri: http://localhost:8081/auth/user/me
            user-name-attribute: name

      
eureka:
  instance:
     leaseRenewalIntervalInSeconds: 5   # DO NOT DO THIS IN PRODUCTION
  client:
    enabled: true
    serviceUrl:
      defaultZone: http://localhost:1111/eureka/
    registerWithEureka: false

# HTTP Server
server:
  port: 3333   # HTTP (Tomcat) port
  servlet:
    session:
      cookie:
        name: UISESSION
        
# Config de ribbon
#empleados-service:
#  ribbon:
  # Estrategia de balanceo. Si no especificamos ninguna por defecto es RoundRobinRule 
#    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.WeightedResponseTimeRule
#    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule
  # Configuraci√≥n de retries
#    MaxAutoRetries: 1
#    MaxAutoRetriesNextServer: 1
#    OkToRetryOnAllOperations: true

# Config propia
app:
  serviceAlias: empleados-service
  dptServiceAlias: departamentos-service
  

  