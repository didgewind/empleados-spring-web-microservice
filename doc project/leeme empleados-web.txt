IMPORTANTE: EN LOS CURSOS, SI EL FORMULARIO DE EMPLEADOS NO VA CON ETIQUETAS DE SPRING (<form:form>)
LA CONFIG DE SEGURIDAD TIENE QUE LLEVAR csrf().disable(), PORQUE SI NO ME VA A DAR UN FORBIDDEN
CADA VEZ QUE PULSE UN BOTÓN

Esta versión tira de spring boot 2.0. Tenemos varios branches abiertos, los más importantes son:

* master: principal, toda la doc de abajo se refiere a él.

* services_varios: refactorización con implementación mínima de las diferentes implementaciones
de la capa de servicios (static, dynamic, ribbondeclarado, ribbonprogramado, feign)

* url_servicio_cableada: para utilizarlo en pruebas de testing con su homólogo empleados spring boot,
no usa eureka ni ribbon

* departamentos: utiliza el servicio de departamentos, los muestra en una jsp aparte

---

empleados web (puerto 3333): app web con seguridad (profe o admin) que tira del microservicio de empleados.
Ahora mismo están funcionando los get, el insert, el update y el delete.

Utiliza tokens jwt para acceder al servicio de empleados. Los usuarios, contraseñas y roles están definidos
en el auth-server. Durante el login se envían las credenciales al auth server, que responderá con un error 401
o con un token jwt. Si es lo segundo añadimos este token a la sesión (para autenticarnos con los
distintos microservicios) y lo parseamos para añadir nuestros roles al contexto de seguridad
(para que spring nos permita acceder a las partes protegidas de nuestra web). Si el auth server
responde con un error,spring ya se encarga de redirigirnos de nuevo al login. Todo esto funciona así:

- En EmpleadosWebSecurityConfig declaramos qué roles pueden acceder a qué partes de nuestra web. No declaramos
users, passwords ni roles (están declarados en el AuthServer). 
Sí especificamos un AuthenticationProvider, EmpleadosWebAuthenticationProvider

- EmpleadosWebAuthenticationProvider: salta cada vez que intentamos hacer login. Se conecta con el AuthServer 
pasándole el user y password que proporciona el usuario. Éste responderá con un web token con los roles embebidos
o con un 401. Si es lo primero, almacenamos el web token en la sesión y los roles en nuestro contexto de seguridad.
Si es lo segundo, lanzamos un BadCredentialsException que hará que Spring vuelva a mostrar la pantalla de login

- EmpleadosAuthServiceImpl: realiza la petición al AuthServer

- EmpleadosAuthManagerImpl: genera la cabecera http con el token de la sesión para realizar peticiones a
los diferentes microservicios

También tenemos la opción de usar Feign (peticiones rest declarativas), aunque no funciona con los últimos
cambios. Creamos el cliente Feign manualmente
por cada petición, para poder propagar las credenciales.

El servicio web está refactorizado para separar el código Feign del que utiliza directamente Ribbon.

Hemos creado una jerarquía de excepciones y transformamos los códigos de error en excepciones de
aplicación en el servicio que son capturadas por el controlador para mostrar errores sensibles. Esto
de momento funciona sólo con el servicio ribbon (no sé cómo sacar el código de estado de una excepción
feign). En el delete del servicio Ribbon tenemos un ejemplo simple de gestión de excepciones y códigos,
para los demás hay hecho un ResponseErrorHandler. El controlador declara un controlador de errores por
defecto (método handleError) para gestionar los errores genéricos.

Implementamos retries usando spring-retry de forma explícita (parece que los retrys automáticos sólo funcionan
con zuul y feign, ver 
https://stackoverflow.com/questions/27468697/spring-cloud-with-resttemplate-ribbon-eureka-retry-when-server-not-available
y https://stackoverflow.com/questions/33765049/spring-cloud-getting-retry-working-in-resttemplate).
Para ello marcamos la clase @Configuration con @EnableRetry y la clase WebServiceRibbon con @Retryable
excluyendo las excepciones EmpleadosWebException para que no reintente en éstas (así no 
reintenta en FORBIDDEN o NOT_FOUND pero sí si el servicio está caído).

Ribbon lo configuramos a nivel de fichero de config (aunque podría hacerse también mediante una
clase @Configuration, ver https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-ribbon.html).
Es importante hacer notar que la configuración se utiliza porque el prefijo de configuración (empleados-service)
coincide con el alias del servicio al que queremos acceder. Por ello cuando usamos el LoadBalancerClient con ese
alias se activa la configuración para ese cliente.

Usamos Java Config para generar todos los beans de la app. Accediendo directamente a localhost:3333 ya aparecen
los dos enlaces posibles. El /logout funciona con post (en index.jsp) o con get (/logout).

	- EmpleadosWebService: clase de negocio que interactúa con el microservicio. 
	  Como ahora no usamos @LoadBalanced, inyectamos en su lugar un LoadBalancerClient
	  para consultar al servidor Eureka con balance de carga y obtener la Url del servicio
	  de empleados a partir de su alias (visto en https://www.javainuse.com/spring/spring_ribbon).
	  
	  Implementa un método nuevo (getAllEmpleadosWithFeign()) que utiliza Feign para recuperar
	  todos los empleados
	  
	- EmpleadosWebSecurityConfig: configuración de seguridad. Añadimos {noop} como prefijo al
	  declarar las contraseñas (transparente para el cliente) para saltarnos el requerimiento
	  de security 5.x de que las contraseñas estén hashcodeadas.
	
	- EmpleadosWebController: controlador. Delega en EmpleadosWebService para la interacción
	  con el micro servicio.
	  
	- EmpleadosWebServer: inicia el servidor y hace de configurador de beans.
	  
	- EmpleadoValidator: validador spring de cif, nombre y apps obligatorios y de edad positiva. Utiliza
	  el fichero de recursos para los parámetros de los mensajes (Name ó Nombre, por ejemplo).
	  
	- EmpleadosAuthManager/Impl: genera la cabecera http con el token de la sesión para realizar peticiones a
	  los diferentes microservicios.
	  
	- EmpleadosAuthService: interacción con el microservicio de autenticación. Existen la impl
	  real (que utiliza un RT @LoadBalanced para acceder al servicio de autenticación) y una
	  implementación mock (que devuelve un token explícito).
	  
	- EmpleadosWebAuthenticationProvider: ver más arriba.

- Sobre el logout (cogido del proyecto 'empleados hb spring mvc sec ws 4' del workspace
'spring completo'): parece que desde la versión 4 de spring security 
el logout por defecto sólo
funciona cuando hacemos una petición de logout POST enviando un csrf (ver apuntes de seguridad
spring). Para habilitar el logout get lo podemos hacer deshabilitando el csrf (como hacemos
en el proyecto mencionado al configurar la seguridad de forma declarativa) o mediante el código que
se encuentra en la clase WebSecurityConfig del mismo proyecto (que respeta el csrf).