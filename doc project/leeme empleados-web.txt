Esta versión tira de spring boot 2.0

* empleados web (puerto 3333): app web con seguridad (profe o admin) que tira del microservicio anterior.
Ahora mismo están funcionando los get y el delete. Hemos modificado la forma de obtener el RestTemplate
para poder propagar el usuario autenticado en el servidor web al servidor rest (es decir, utilizar el usuario
que está haciendo esa llamada en ese momento). Hay que hacer notar que para ello hay que configurar el
AuthenticationManagerBuilder (en la clase de config de seguridad) con eraseCredentials(false), para
que no elimine el password del Authentication nada más hacer el login, y así poder acceder a él
en cada petición que redirigamos al servidor Rest. También hemos dejado de utilizar @LoadBalanced porque
los únicos ejemplos que encontramos siempre inyectan el RestTemplate, y para utilizar autenticación
dinámica hay que instanciar el RestTemplate por cada petición. Quizás se podría mirar lo de los beans
proxy-scoped...

También estamos usando Feign (peticiones rest declarativas). Creamos el cliente Feign manualmente
por cada petición, para poder propagar las credenciales.

Usamos Java Config para generar todos los beans de la app. Accediendo directamente a localhost:3333 ya aparecen
los dos enlaces posibles. El /logout funciona con post (en index.jsp) o con get (/logout).

	- EmpleadosWebService: clase de negocio que interactúa con el microservicio. 
	  Como ahora no usamos @LoadBalanced, inyectamos en su lugar un LoadBalancerClient
	  para consultar al servidor Eureka con balance de carga y obtener la Url del servicio
	  de empleados a partir de su alias (visto en https://www.javainuse.com/spring/spring_ribbon). 
	  Para conseguir seguridad dinámica inyectamos el RestTemplateBuilder 
	  y para cada petición recuperamos el principal y la password y con ellos generamos 
	  un RestTemplate autenticado.
	  
	  Implementa un método nuevo (getAllEmpleadosWithFeign()) que utiliza Feign para recuperar
	  todos los empleados
	  
	- EmpleadosWebSecurityConfig: configuración de seguridad. Añadimos {noop} como prefijo al
	  declarar las contraseñas (transparente para el cliente) para saltarnos el requerimiento
	  de security 5.x de que las contraseñas estén hashcodeadas.
	
	- EmpleadosWebController: controlador. Delega en EmpleadosWebService para la interacción
	  con el micro servicio.
	  
	- EmpleadosWebServer: inicia el servidor y hace de configurador de beans.
	  
	- EmpleadoValidator: validador spring de cif, nombre y apps obligatorios y de edad positiva. Utiliza
	  el fichero de recursos para los parámetros de los mensajes (Name ó Nombre, por ejemplo).

- Sobre el logout (cogido del proyecto 'empleados hb spring mvc sec ws 4' del workspace
'spring completo'): parece que desde la versión 4 de spring security 
el logout por defecto sólo
funciona cuando hacemos una petición de logout POST enviando un csrf (ver apuntes de seguridad
spring). Para habilitar el logout get lo podemos hacer deshabilitando el csrf (como hacemos
en el proyecto mencionado al configurar la seguridad de forma declarativa) o mediante el código que
se encuentra en la clase WebSecurityConfig del mismo proyecto (que respeta el csrf).